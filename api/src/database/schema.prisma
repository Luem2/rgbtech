generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id          String    @id @default(uuid())
  firstName   String
  lastName    String
  email       String    @unique
  password    String
  picture     String?
  birthDate   DateTime?
  nacionality String?
  role        Role      @default(USER)
  verificated Boolean   @default(false)
  RGBpoints   Float     @default(0)
  google      Boolean   @default(false)
  disabled    Boolean   @default(false)

  shoppingCart ItemCart[]
  history      HistoryProduct[]
  favorites    Favorites[]
  transactions Transactions[]
  reviews      Review[]
  awards       Award[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  country Country? @relation(fields: [nacionality], references: [id])
}

model Product {
  id                 String  @id @default(uuid())
  brandId            String
  name               String
  price              Float
  description        String
  specifications     Json
  picture            String
  stock              Int
  onDiscount         Boolean @default(false)
  discountPercentage Int     @default(0)
  freeShipping       Boolean @default(false)
  rating             Float   @default(0)
  disabled           Boolean @default(false)

  usersFavorite Favorites[]
  tags          Tag[]
  shoppingCarts ItemCart[]
  usersHistory  HistoryProduct[]
  reviews       Review[]
  transactions  Transactions[]

  brand Brand @relation(fields: [brandId], references: [name])
}

model ItemCart {
  userId    String
  productId String
  quantity  Int

  user    User    @relation(fields: [userId], references: [id])
  product Product @relation(fields: [productId], references: [id])

  @@id([userId, productId])
}

model HistoryProduct {
  userId    String
  productId String
  vistedOn  DateTime @default(now())

  user    User    @relation(fields: [userId], references: [id])
  product Product @relation(fields: [productId], references: [id])

  @@id([userId, productId])
}

model Favorites {
  userId    String
  productId String
  starredOn DateTime @default(now())

  user    User    @relation(fields: [userId], references: [id])
  product Product @relation(fields: [productId], references: [id])

  @@id([userId, productId])
}

model Tag {
  name     String    @id
  disabled Boolean   @default(false)
  products Product[]
}

enum Role {
  USER
  ADMIN
}

model Brand {
  name     String    @id
  logo     String
  disabled Boolean   @default(false)
  products Product[]
}

model Award {
  id             String @id @default(uuid())
  name           String
  description    String
  specifications Json
  requiredPoints Int
  picture        String
  users          User[]
}

model Review {
  userId    String
  productId String
  comment   String
  rating    Int

  user    User    @relation(fields: [userId], references: [id])
  product Product @relation(fields: [productId], references: [id])

  @@id([userId, productId])
}

model Transactions {
  userId    String
  productId String
  amount    Int
  listPrice Float
  date      DateTime @default(now())

  user    User    @relation(fields: [userId], references: [id])
  product Product @relation(fields: [productId], references: [id])

  @@id([userId, productId])
}

model Country {
  id      String @id
  name    String
  flag    String
  demonym String
  User    User[]
}
