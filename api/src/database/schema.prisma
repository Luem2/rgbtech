generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id          String    @id @default(uuid())
  firstName   String
  lastName    String
  email       String    @unique
  password    String
  picture     String?
  birthDate   DateTime? @db.Date
  nacionality String
  country     Country   @relation(fields: [nacionality], references: [id])
  rol         Rol       @default(USER)
  verificated Boolean   @default(false)
  RGBpoints   Float     @default(0)
  google      Boolean   @default(false)
  disabled    Boolean   @default(false)

  shoppingCart Cart?
  history      History?
  favorites    Favorites?
  transactions Transactions?
  awards       Award[]
  reviews      Review[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Product {
  id                 String  @id @default(uuid())
  brand              Brand   @relation(fields: [brandId], references: [name])
  brandId            String
  name               String
  price              Float
  description        String
  specifications     Json
  picture            String
  stock              Int
  onDiscount         Boolean @default(false)
  discountPercentage Int     @default(0)
  freeShipping       Boolean @default(false)
  rating             Float   @default(0)
  disabled           Boolean @default(false)

  usersFavorite Favorites[]
  tags          Tag[]
  shoppingCarts Cart[]
  usersHistory  History[]
  reviews       Review[]
  transactions  Transactions[]
}

model Cart {
  id        String  @id @default(uuid())
  user      User    @relation(fields: [userId], references: [id])
  userId    String  @unique
  product   Product @relation(fields: [productId], references: [id])
  productId String

  amount Int
}

model History {
  id        String  @id @default(uuid())
  user      User    @relation(fields: [userId], references: [id])
  userId    String  @unique
  product   Product @relation(fields: [productId], references: [id])
  productId String

  vistedOn DateTime @default(now())
}

model Favorites {
  id        String  @id @default(uuid())
  user      User    @relation(fields: [userId], references: [id])
  userId    String  @unique
  product   Product @relation(fields: [productId], references: [id])
  productId String

  starredOn DateTime @default(now())
}

model Tag {
  name     String    @id
  disabled Boolean   @default(false)
  products Product[]
}

enum Rol {
  USER
  ADMIN
}

model Brand {
  name     String    @id
  logo     String
  disabled Boolean   @default(false)
  products Product[]
}

model Award {
  id             String @id @default(uuid())
  name           String
  description    String
  specifications Json
  requiredPoints Int
  picture        String
  users          User[]
}

model Review {
  id        String  @id @default(uuid())
  user      User    @relation(fields: [userId], references: [id])
  userId    String
  product   Product @relation(fields: [productId], references: [id])
  productId String
  comment   String
  rating    Float
}

model Transactions {
  id        String  @id @default(uuid())
  user      User    @relation(fields: [userId], references: [id])
  userId    String  @unique
  product   Product @relation(fields: [productId], references: [id])
  productId String

  amount     Int
  totalPrice Float
  date       DateTime @default(now())
}

model Country {
  id      String @id
  name    String
  flag    String
  demonym String
  User    User[]
}
